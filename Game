import java.util.Scanner;

public class Game {
    private Piece[][] board = new Piece[4][4];
    private Piece[] remainingPieces = new Piece[16];
    private int remainingCount = 16;

    public Game() {
        // Create all 16 unique pieces
        int index = 0;
        for (Color color : Color.values()) {
            for (Shape shape : Shape.values()) {
                for (Fill fill : Fill.values()) {
                    for (Height height : Height.values()) {
                        remainingPieces[index++] = new Piece(color, shape, fill, height);
                    }
                }
            }
        }
    }

    public void start() {
        Scanner scanner = new Scanner(System.in);
        Piece selectedPiece = null;
        int currentPlayer = 1;

        while (true) {
            System.out.println("\nCurrent Board:");
            printBoard();

            // Print remaining pieces
            System.out.println("\nAvailable Pieces:");
            for (int i = 0; i < remainingPieces.length; i++) {
                if (remainingPieces[i] != null) {
                    System.out.println(i + ": " + remainingPieces[i].toString());
                }
            }
// Step 1: Player selects a piece for opponent to place
            System.out.println("Player " + currentPlayer + ", choose a piece for your opponent to place (0-15):");
            int chosenIndex;
            while (true) {
                chosenIndex = scanner.nextInt();
                if (chosenIndex >= 0 && chosenIndex < 16 && remainingPieces[chosenIndex] != null) {
                    selectedPiece = remainingPieces[chosenIndex];
                    remainingPieces[chosenIndex] = null;
                    remainingCount--;
                    break;
                } else {
                    System.out.println("Invalid choice. Try again.");
                }
            }

            // Step 2: Opponent places the selected piece
            int placingPlayer = currentPlayer == 1 ? 2 : 1;
            System.out.println("Player " + placingPlayer + ", place the piece at row and column (0-3):");
            int row, col;
            while (true) {
                row = scanner.nextInt();
                col = scanner.nextInt();
                if (isValidMove(row, col)) {
                    board[row][col] = selectedPiece;
                    break;
                } else {
                    System.out.println("Invalid position. Try again.");
                }
            }

            // Step 3: Check win
            if (checkWin(row, col)) {
                System.out.println("\nPlayer " + placingPlayer + " placed the winning piece!");
                printBoard();
                break;
            }

            // Step 4: Check draw
            if (remainingCount == 0) {
                System.out.println("The game is a draw!");
                break;
            }

            // Step 5: Switch turns
            currentPlayer = placingPlayer;
        }

        scanner.close();
    }
 private boolean isValidMove(int row, int col) {
        return row >= 0 && row < 4 && col >= 0 && col < 4 && board[row][col] == null;
    }

    private boolean checkWin(int row, int col) {
        return checkLine(getRow(row)) ||
                checkLine(getCol(col)) ||
                (row == col && checkLine(getMainDiagonal())) ||
                (row + col == 3 && checkLine(getAntiDiagonal()));
    }

    private Piece[] getRow(int row) {
        return board[row];
    }

    private Piece[] getCol(int col) {
        Piece[] column = new Piece[4];
        for (int i = 0; i < 4; i++) {
            column[i] = board[i][col];
        }
        return column;
    }

 for (int i = 0; i < 4; i++) {
            diagonal[i] = board[i][3 - i];
        }
        return diagonal;
    }

    private boolean checkLine(Piece[] line) {
        for (Piece p : line) {
            if (p == null) return false;
        }
        return Piece.sharingCommonAttr(line);
    }

    private void printBoard() {
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                System.out.print(board[i][j] == null ? "[     ]" : board[i][j].toString());
                System.out.print("\t");
            }
            System.out.println();
        }
    }
}


